name: Build and deploy Node.js app to Azure Web App - airtrexrequests

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: ðŸ§¾ Checkout repo
        uses: actions/checkout@v4

      - name: ðŸ”§ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: ðŸ“¦ Install, build, and prune
        run: |
          npm ci
          npm run build
          npm prune --omit=dev
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}

      - name: ðŸ“‚ Prepare test deployment package
        run: |
          # Create a simple test application
          mkdir -p test-deploy
          
          # Create a basic server.js file
          echo 'const http = require("http");
          const port = process.env.PORT || 8080;
          
          const server = http.createServer((req, res) => {
            console.log(`Request received: ${req.method} ${req.url}`);
            res.statusCode = 200;
            res.setHeader("Content-Type", "text/html");
            res.end(`
              <!DOCTYPE html>
              <html>
                <head><title>Azure Test App</title></head>
                <body>
                  <h1>Azure Test App is Running</h1>
                  <p>Server time: ${new Date().toISOString()}</p>
                  <p>Node version: ${process.version}</p>
                  <p>Environment:</p>
                  <pre>${JSON.stringify(process.env, null, 2)}</pre>
                </body>
              </html>
            `);
          });
          
          server.listen(port, () => {
            console.log(`Server running on port ${port}`);
          });' > test-deploy/server.js
          
          # Create package.json
          echo '{
            "name": "azure-test-app",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "start": "node server.js"
            }
          }' > test-deploy/package.json
          
          # Create web.config
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}" />
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />
                    </conditions>
                    <action type="Rewrite" url="server.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode nodeProcessCommandLine="node" watchedFiles="web.config;*.js" loggingEnabled="true" />
            </system.webServer>
          </configuration>' > test-deploy/web.config
          
          # Create directory for static files
          mkdir -p test-deploy/public
          
          # Add a simple static file
          echo '<html><body>Static file test</body></html>' > test-deploy/public/static-test.html
          
          # Create startup script
          echo '#!/bin/sh
          cd /home/site/wwwroot
          PORT=8080 node server.js' > test-deploy/startup.sh
          chmod +x test-deploy/startup.sh
          
          # Create iisnode.yml for logging
          echo 'loggingEnabled: true
          logDirectory: iisnode
          nodeProcessCommandLine: "node"' > test-deploy/iisnode.yml
          
          # Package everything
          cd test-deploy
          zip -r ../release.zip .
          cd ..
          
      - name: ðŸ“‚ Prepare standalone deployment package
        run: |
          mkdir -p deploy/.next/static
          cp -r .next/standalone/* deploy/
          cp -r .next/static deploy/.next/static
          cp -r public deploy/public
          cp next.config.js deploy/ || true
          # Create a startup file
          echo "#!/bin/sh" > deploy/startup.sh
          echo "cd /home/site/wwwroot" >> deploy/startup.sh
          echo "NODE_ENV=production node server.js" >> deploy/startup.sh
          chmod +x deploy/startup.sh
          cd deploy
          zip -r ../release.zip .
          cd ..


      - name: ðŸ“¤ Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
      - name: ðŸ“¥ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: ðŸ“¦ Unzip release
        run: unzip release.zip

      - name: ðŸš€ Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'airtrexrequests'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_8F1A663139A6471BBB0B85FEBF386A29 }}
